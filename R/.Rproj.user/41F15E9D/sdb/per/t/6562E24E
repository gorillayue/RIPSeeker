{
    "collab_server" : "",
    "contents" : "# Function Name: \tripSeek\n# Description: \t\tGrand master function of RIPSeeker: run mainSeek with or without control library\n# Input: \t\t\tbamPath to bam files (either a single dir or the multiple file paths) \n# Output:\t\t\tGAlignments and GRanges objects representating alignment object after disambiguating multihits (if any) and predicted RIP regions in a defined format (default: GFF3)\n#\n# Author: Yue Li\n###############################################################################\nripSeek <- function(bamPath, cNAME, binSize=NULL, strandType=NULL, \t\t\n\t\tpaired=FALSE, biomaRt_dataset, goAnno, exportFormat = \"gff3\", \n\t\tannotateFormat = \"txt\", annotateType = \"TSS\", outDir, \n\t\tpadjMethod=\"BH\", logOddCutoff=0,\n\t\tpvalCutoff=1, pvalAdjCutoff=1, eFDRCutoff=1, ...)\n{\n#\trequire(GenomicRanges)\n#\trequire(rtracklayer)\n#\trequire(Rsamtools)\n\t\t\t\t\t\t\t\n\tstopifnot(!missing(bamPath))\n\t\t\n\tif(!missing(outDir) && !file.exists(outDir)) dir.create(outDir, recursive = TRUE)\t\n\t\n\tstage <- 1\n\t\t\t\n\t################ Collect BAM files ################\t\t\n\t\n\tstopifnot(all(file.exists(bamPath)))\n\t\n\tmessage(sprintf(\"\\n\\n*%s. Collect alignment files\\n\", as.roman(stage)))\n\t\n\t# assuming in this case each bamPath specifies a bam/bed/sam file \n\tif(length(bamPath) > 1) {\n\t\t\n\t\tif(any(file.info(bamPath)$isdir)) {\n\t\t\t\n\t\t\tstop(\"Some files are directories %s\\nTry specify bamPath as either a dir or all files in that dir\", bamPath[file.info(bamPath)$isdir])\n\t\t}\n\t\t\n\t\tbamFiles <- bamPath\n\t\t\n\t} else {\n\t\t\n\t\tif(file.info(bamPath)$isdir) {\n\t\t\t\n\t\t\tbamFiles <- list.files(bamPath, pattern = \"\\\\.bam$\", full.names=TRUE, recursive=TRUE)\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tbamFiles <- bamPath\n\t\t}\n\t}\n\t\n\tif(!missing(cNAME)) {\n\t\t\t\t\n\t\tbamFilesRIP <- grep(cNAME, bamFiles, invert=TRUE, value=TRUE)\n\t\t\n\t\tbamFilesCTL <- grep(cNAME, bamFiles, invert=FALSE, value=TRUE)\n\t\t\n\t\tif(length(bamFilesCTL) == 0) {\n\t\t\t\n\t\t\twarning(sprintf(\"The pattern %s is not found in input file names!\\nAll files are treated as RIP.\", cNAME))\n\t\t\t\n\t\t\trm(bamFilesCTL)\n\t\t}\n\t\t\n\t} else {\n\t\t\t\t\n\t\tbamFilesRIP <- bamFiles\n\t}\n\t\n\tmessage(sprintf(\"\\nRIP alignment files:\"))\n\tmessage(sprintf(\"\\t%s\\n\", bamFilesRIP))\n\t\n\tif(exists(\"bamFilesCTL\")) {\n\t\t\n\t\tmessage(sprintf(\"\\nControl alignment files:\"))\n\t\tmessage(sprintf(\"\\t%s\\n\", bamFilesCTL))\n\t\t\n\t} else {\n\t\tmessage(sprintf(\"No control alignment files specified\"))\n\t}\n\t\n\tstage <- stage + 1\n\t\n\t################ mainSeek on RIP ################\t\n\tmessage(sprintf(\"\\n\\n*%s. Analyzing RIP library:\\n\", as.roman(stage)))\n\t\t\n\tmainSeekOutputRIP <- mainSeek(bamFilesRIP, binSize=binSize, strandType=strandType, paired=paired, ...)\n\t\t\n\t################ mainSeek on CTL ################\n\tif(exists(\"bamFilesCTL\")) {\n\t\t\t\t\n\t\tmessage(sprintf(\"\\n\\n*%s.2. Analyzing control library:\\n\", as.roman(stage)))\n\t\t\n\t\t# use defined binSize from RIP\n\t\tRIPBinSize <- lapply(mainSeekOutputRIP$nbhGRList, function(x) median(width(x)))\n\t\t\t\t\t\t\n\t\tmainSeekOutputCTL <- mainSeek(bamFilesCTL, binSize=RIPBinSize, strandType=strandType, paired=paired, ...)\t\t\n\t}\n\t\n\tstage <- stage + 1\n\t\n\t\n\t################ seek RIP regions ################\t\n\tif(exists(\"bamFilesCTL\")) {\n\t\t# with control\n\t\tmessage(sprintf(\"\\n\\n*%s. Seek RIP regions with control library:\\n\", as.roman(stage)))\n\t\t\n\t\tRIPGRList <- endoapply(mainSeekOutputRIP$nbhGRList, \n\t\t\t\tseekRIP, nbhGRCTL=mainSeekOutputCTL$nbhGRList,\n\t\t\t\tpadjMethod=padjMethod, logOddCutoff=logOddCutoff,\n\t\t\t\tpvalCutoff=pvalCutoff, pvalAdjCutoff=pvalAdjCutoff,\n\t\t\t\teFDRCutoff=eFDRCutoff)\n\t\t\n\t\tgenome(RIPGRList) <- genome(mainSeekOutputRIP$alignGal)\n\t\t\t\t\n\t\t\n\t} else {\n\t\t# without control\n\t\tmessage(sprintf(\"\\n\\n*%s. Seek RIP regions without control library:\\n\", as.roman(stage)))\t\t\n\t\t\n\t\tRIPGRList <- endoapply(mainSeekOutputRIP$nbhGRList, seekRIP,\n\t\t\t\tpadjMethod=padjMethod, logOddCutoff=logOddCutoff,\n\t\t\t\tpvalCutoff=pvalCutoff, pvalAdjCutoff=pvalAdjCutoff)\n\t\t\n\t\tgenome(RIPGRList) <- genome(mainSeekOutputRIP$alignGal)\n\t}\n\t\n\tstage <- stage + 1\n\t\n\t################ Annotate peaks ################\n\t\n\tif(!missing(biomaRt_dataset)) {\n\t\tmessage(sprintf(\"\\n\\n*%s. Annotate RIP regions via online ensembl database (%s):\\n\", \n\t\t\t\t\t\tas.roman(stage), biomaRt_dataset))\n\t\t\n\t\tsigGRanges <- unlist(RIPGRList)\n\t\t\n\t\tnames(sigGRanges) <- NULL\n\t\t\n\t\tsuppressMessages(\n\t\t\t\t\t\t\t\t\n\t\t\t\tif(!missing(goAnno)) { # also run GO analysis\t\t\t\t\t\t\t\n\t\t\t\t\tannotatedRIPGR <- annotateRIP(sigGRanges = sigGRanges,\n\t\t\t\t\t\t\tbiomaRt_dataset = biomaRt_dataset, goAnno = goAnno, \n\t\t\t\t\t\t\tfeatureType = annotateType, strandSpecific = !is.null(strandType),...)\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tannotatedRIPGR <- annotateRIP(sigGRanges = sigGRanges,\n\t\t\t\t\t\t\tbiomaRt_dataset = biomaRt_dataset, \n\t\t\t\t\t\t\tfeatureType = annotateType, strandSpecific = !is.null(strandType),...)\t\t\t\t\t\n\t\t\t\t}\n\t\t)\n\t\t\n\t\tstage <- stage + 1\t\n\t}\n\t\n\tif(!exists(\"bamFilesCTL\"))  mainSeekOutputCTL <- NULL\n\tif(!exists(\"annotatedRIPGR\"))  annotatedRIPGR <- NULL\n\t\n\t################ save and export results to outDir ################\n\tif(!missing(outDir)) {\n\t\t\t\t\t\t\n\t\t# remove backslash to avoid double backslash in the following path names\n\t\toutDir <- sub(\"/$\", \"\", outDir)\n\t\t\n\t\tmessage(sprintf(\"\\n\\n*%s. Save and export all results to %s\\n\",\n\t\t\t\t\t\tas.roman(stage), outDir))\n\t\t\n\t\toutfile <- paste(outDir, \"seekOutput.RData\", sep=\"/\")\n\t\t\n\t\tmessage(sprintf(\"\\n**A. Saving RData to %s\\n\", outfile))\n\t\t\n\t\t\t\t\t\t\n\t\t################ save results in RData ################\t\t\t\n\t\tsave(mainSeekOutputRIP, RIPGRList, mainSeekOutputCTL, annotatedRIPGR, file=outfile)\t\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t################ export RIP regions ################\t\t\n\t\toutfile <- paste(outDir, \"/RIPregions.\", exportFormat, sep=\"\")\n\t\t\n\t\tmessage(sprintf(\"\\n**B. Exporting %s\\n\", outfile))\n\t\t\t\t\n\t\texportRIP <- unlist(RIPGRList)\n\t\t\t\t\n\t\tnames(exportRIP) <- NULL\n\t\t\n\t\texportGRanges(exportRIP, outfile, exportFormat)\n\t\t\n\t\t\n\t\t################ export annotated RIP regions ################\n\t\tif(!is.null(annotatedRIPGR)) {\n\t\t\t\t\t\t\n\t\t\toutfile <- paste(outDir, \"/RIPregions_annotated.\", exportFormat, sep=\"\")\n\t\t\t\n\t\t\toutfile2 <- paste(outDir, \"/RIPregions_annotated.txt\", sep=\"\")\n\t\t\t\n\t\t\tmessage(sprintf(\"\\n\\n**C. Exporting %s\\n\", outfile))\n\t\t\t\n\t\t\tif(is.list(annotatedRIPGR)) {\n\t\t\t\tsigGRangesAnnotated <- annotatedRIPGR$sigGRangesAnnotated\n\t\t\t\tenrichedGO <- annotatedRIPGR$enrichedGO\n\t\t\t} else {\n\t\t\t\tsigGRangesAnnotated <- annotatedRIPGR\n\t\t\t\tenrichedGO <- NULL\n\t\t\t}\n\t\t\t\n\t\t\texportGRanges(gRanges=sigGRangesAnnotated, outfile=outfile, \n\t\t\t\t\texportFormat=exportFormat)\n\t\t\t\n\t\t\t\n\t\t\texportGRanges(gRanges=sigGRangesAnnotated, outfile=outfile2, \n\t\t\t\t\texportFormat=\"txt\")\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t################ export enriched GO ################\n\t\t\tif(!is.null(enrichedGO)) {\n\t\t\t\toutfile <- paste(outDir, \"/RIPregions_enrichedGO.txt\", sep=\"\")\n\t\t\t\t\n\t\t\t\tmessage(sprintf(\"\\n\\n**D. Exporting %s\\n\", outfile))\n\t\t\t\t\n\t\t\t\twrite.table(enrichedGO, file=outfile, row.names=F, quote=F, sep=\"\\t\")\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tstage <- stage + 1\n\t}\n\t\n\t\t\n\t################ return results in list ################\n\tmessage(sprintf(\"\\n\\n*%s. Return results list to R console\\n\", as.roman(stage)))\n\t\t\n\tseekOut <- list(mainSeekOutputRIP=mainSeekOutputRIP,\n\t\t\tmainSeekOutputCTL=mainSeekOutputCTL, RIPGRList=RIPGRList,\n\t\t\tannotatedRIPGR=annotatedRIPGR)\t\t\t\t\n\t\n\t\n\treturn(seekOut)\n\t\t\t\t\t\n}\n",
    "created" : 1440348181743.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3474811486",
    "id" : "6562E24E",
    "lastKnownWriteTime" : 1401316564,
    "last_content_update" : 0,
    "path" : "~/myBiocPkg/RIPSeeker/R/ripSeek.R",
    "project_path" : "ripSeek.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}