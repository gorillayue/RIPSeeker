{
    "collab_server" : "",
    "contents" : "computeRPKM <- function(bamFiles, RIPSeekerRead=TRUE, paired=FALSE, \n\t\t\tcountMode=\"IntersectionNotEmpty\", featureGRanges, \n\t\t\tidType=\"ensembl_transcript_id\", featureType=\"exon\", \n\t\t\tignore.strand=FALSE, txDbName=\"biomart\", \n\t\t\tmoreGeneInfo=FALSE, saveData, justRPKM=TRUE, ...)\n{\t\n\tlibrary(Rsamtools)\n\tlibrary(GenomicFeatures)\n\tlibrary(biomaRt)\n\t\t\t\t\t\n\t##################### Make transcript db #####################\n\t\n\tif(missing(featureGRanges)) {\n\t\t\n\t\tstopifnot(txDbName %in% c(\"biomart\", \"UCSC\"))\n\t\t\n\t\tstopifnot(featureType %in% c(\"exon\", \"intron\", \"fiveUTR\", \"threeUTR\", \"CDS\"))\n\t\t\n\t\tstopifnot(list(...)$by %in% c(\"tx\", \"gene\"))\n\t\t\n\t\t# hack functions to ignore unused arguments\n\t\tformals(makeTxDbFromBiomart) <- c(formals(makeTxDbFromBiomart), alist(... = ))\n\t\tformals(makeTxDbFromUCSC) <- c(formals(makeTxDbFromUCSC), alist(... = ))\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\tif(txDbName == \"biomart\") txDb <- makeTxDbFromBiomart(...)\n\t\t\n\t\tif(txDbName == \"UCSC\") txDb <- makeTxDbFromUCSC(...)\n\t\t\t\t\t\t\n\t\t# group annotation by transcripts (\"tx\") or gene\n\t\tif(list(...)$by == \"tx\") {\n\t\t\t\n\t\t\tif(featureType == \"exon\") featureGRanges <- exonsBy(txDb, by=\"tx\", use.names=TRUE)\n\t\t\t\n\t\t\tif(featureType == \"CDS\") featureGRanges <- cdsBy(txDb, by=\"tx\", use.names=TRUE)\n\t\t\t\n\t\t} else {\t\t\t\t\t\t\n\t\t\t\n\t\t\tif(featureType == \"exon\") featureGRanges <- exonsBy(txDb, by=\"gene\")\n\t\t\t\n\t\t\tif(featureType == \"CDS\") featureGRanges <- cdsBy(txDb, by=\"gene\")\n\t\t\t\n\t\t\tif(featureType == \"intron\") featureGRanges <- intronsByTranscript(txDb, use.names=TRUE)\n\t\t\t\n\t\t\tif(featureType == \"fiveUTR\") featureGRanges <- fiveUTRsByTranscript(txDb,use.names=TRUE)\n\t\t\t\n\t\t\tif(featureType == \"threeUTR\") featureGRanges <- threeUTRsByTranscript(txDb,use.names=TRUE)\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t# ensembl uses numericals for chromosome ID (e.g. 1 rather than chr1)\n\t\t# add chr to it to be consistent with the alignment\n\t\tif(txDbName == \"biomart\") seqlevels(featureGRanges) <- paste(\"chr\", seqlevels(featureGRanges), sep=\"\")\t\t\n\t\t\n\t} else {\n\t\t\n\t\tstopifnot(class(featureGRanges) %in% c(\"character\", \"GRanges\", \"GRangesList\"))\t\t\n\t}\n\n\t# assuming featureGRanges is the file name of tab-delim data\n\tif(!missing(featureGRanges) && is.character(featureGRanges)) {\n\t\t\n\t\tfeatureGRanges <- as(read.delim(featureGRanges), \"GRanges\")\n\t}\n\t\n\t\n\t##################### Read BAM #####################\n\tif(RIPSeekerRead) { # read alignment files using RIPSeeker built-in function \n\t\t\n\t\taligns <- combineAlignGals(bamFiles, ...)\n\t\t\n\t} else { # read by directly calling required functions\n\t\t\n\t\taligns <- NULL\n\t\t\t\t\t\t\t\n\t\tmessage(sprintf(\"%d BAM files are combined\", length(bamFiles)))\n\t\t\n\t\tfor(bamFile in bamFiles) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tif(paired) { # paired-end\n\t\t\t\t\n\t\t\t\tparam <- ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE, isPaired=paired, hasUnmappedMate=FALSE, isProperPair=paired, isDuplicate=FALSE))\n\t\t\t\t\n\t\t\t\tif(is.null(aligns)) aligns <- galp2gal(readGAlignmentPairs(bamFile, param=param))\n\t\t\t\t\n\t\t\t\tif(!is.null(aligns)) aligns <- append(aligns, galp2gal(readGAlignmentPairs(bamFile, param=param)))\n\t\t\t\t\n\t\t\t} else { # single-end\n\t\t\t\t\n\t\t\t\tparam <- ScanBamParam(flag=scanBamFlag(isUnmappedQuery=FALSE, isDuplicate=FALSE))\n\t\t\t\t\n\t\t\t\tif(is.null(aligns)) aligns <- readGAlignments(bamFile, param=param)\n\t\t\t\t\n\t\t\t\tif(!is.null(aligns)) aligns <- append(aligns, readGAlignments(bamFile, param=param))\n\t\t\t}\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n\t\n\t##################### Compute RPKM #####################\t\t\n\t# count reads to return RangedSummarizedExperiment object\n\trpkmSEobj <- summarizeOverlaps(features=featureGRanges, reads=aligns, mode=countMode, ignore.strand=ignore.strand)\n\t\t\n\t# get counts\t\n\tcounts <- unlist(assays(rpkmSEobj))\n\t\n\t# compute the 'K' in RPKM\t\n\tnumBases <- sum(width(featureGRanges))\t\n\tgeneLengthsInKB <- numBases / 1e3\n\t\n\t# comptue the M in RPKM\t\n\tmillionsMapped <- length(aligns) / 1e6 \t# per million of total mapped reads \n\n\t# counted reads / total reads in millions\n\trpm <- counts / millionsMapped\n\n\t# reads per million per geneLength in Kb\n\trpkm <- rpm / geneLengthsInKB\n\n\t# save rpkm in metadata slot of the RangedSummarizedExperiment object\n\tmetadata(rpkmSEobj) <- list(rpkm=rpkm)\n\t\n\t\n\t##################### Save as data.frame #####################\t\t\n\t# create a data.frame for easy viewing\n\t\n\trpkmDF <- data.frame(count=counts, rpkm=rpkm, totalExonLength=numBases,\n\t\t      row.names=names(rowRanges(rpkmSEobj)), check.names=FALSE)\n\t\n\tif(!paired) names(rpkmDF) <- c(\"counts\", \"rpkm\", \"totalExonLength\")\n\t\n\tif(paired) names(rpkmDF) <- c(\"counts\", \"fpkm\", \"totalExonLength\")\n\t\n\t##################### Annotate Features #####################\t\n\tif(moreGeneInfo) {\n\t\t\n\t\tfeatureID <- rownames(rpkmDF)\n\t\t\n\t\t# hack useMart to ignore unused arguments\n\t\tformals(useMart) <- c(formals(useMart), alist(... = ))\n\t\t\n\t\tmart <- useMart(...)\n\t\t\n\t\tgeneInfo <- getBM(mart=mart, \n\t\t\t\tattributes=c(\"chromosome_name\", \"start_position\", \"end_position\", \"strand\",\n\t\t\t\t\t\t\"external_gene_id\", \"ensembl_transcript_id\", \n\t\t\t\t\t\t\"ensembl_gene_id\", \"ucsc\", \"description\"),\n\t\t\t\tfilters=idType, values = featureID)\n\t\t\n\t\tgeneInfo  <- geneInfo[match(featureID, geneInfo[,idType]),]\n\t\t\n\t\t\n\t\t# form data.frame in bed format \n\t\trpkmDF.annotated <- cbind(geneInfo[,c(1,2,3,5)],\n\t\t\t\ttotalExonLength=rpkmDF$totalExonLength,\n\t\t\t\tgeneInfo[,4, drop=FALSE], uniqueMapCount=rpkmDF$counts,\n\t\t\t\tensembl_gene_id=geneInfo$ensembl_gene_id, \n\t\t\t\tgeneLength=abs(geneInfo$end - geneInfo$start),\n\t\t\t\tdescription=geneInfo$description)\n    \n\t\tif(!paired) rpkmDF.annotated$RPKM <- rpkmDF$rpkm\n    \n\t\tif(paired) rpkmDF.annotated$FPKM <- rpkmDF$fpkm\n\t\t\n\t\trownames(rpkmDF.annotated) <- rownames(rpkmDF)\t\t\t\t\t\t\t\n\t\t\n\t\tif(!(\"chr\" %in% rpkmDF.annotated$chromosome_name)) {\n\t\t\t\n\t\t\trpkmDF.annotated$chromosome_name <- \n\t\t\t\t\tpaste(\"chr\", rpkmDF.annotated$chromosome_name, sep=\"\")\n\t\t}\n\t\t\n\t\tif(is.integer(rpkmDF.annotated$strand)) {\n\t\t\t\n\t\t\trpkmDF.annotated$strand <- sub(\"^1$\", \"+\", rpkmDF.annotated$strand)\n\t\t\t\n\t\t\trpkmDF.annotated$strand <- sub(\"-1$\", \"-\", rpkmDF.annotated$strand)\t\t\t\n\t\t}\n\t\t\n\t\trpkmDF <- rpkmDF.annotated\n\t}\n\t\t\t\n\t\n\t##################### Outputs #####################\n\tif(!missing(saveData)) save(rpkmDF, file=saveData)\n\t\n\n\tif(justRPKM) {\n\t\t\n\t\truleBasedRIPSeekResults <- rpkmSEobj\n\t\t\n\t} else {\n\t\t\n\t\truleBasedRIPSeekResults <- list(rpkmSEobj=rpkmSEobj, rpkmDF=rpkmDF, featureGRanges=featureGRanges)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t}\n\t\t\t\n\t\n\treturn(ruleBasedRIPSeekResults)\t\t\n}\n\n",
    "created" : 1406559221446.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3200751215",
    "id" : "FE7DA548",
    "lastKnownWriteTime" : 1451967982,
    "last_content_update" : 1451967982,
    "path" : "~/myBiocPkg/RIPSeeker/R/computeRPKM.R",
    "project_path" : "computeRPKM.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}